name: Build U-Boot

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      # app_branch:
      #   description: "Select openwrt branch"
      #   required: true
      #   default: "u-boot"
      #   type: choice
      #   options:
      #     - u-boot
      device_branch:
        description: "Select device branch"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - 360t7
          - livinet_zr-3020
          - cetron_ct3003
          - jcg_q30
          - konka_komi-a31
          - wr30u
          - imou_lc-hx3001
          - clt_r30b1
          - abt_asr3000
          - cmcc_a10
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - h3c_magic-nx30-pro
          - ax3000t
          - redmi_ax6000
          - tplink_tl-xdr608x
          - ruijie_rg-x60-pro
          - jdcloud_re-cp-03
          - glinet_gl-mt6000
          - nokia_ea0326gmp
          - ruijie_rg_x30e
          - ruijie_rg_x30e_pro
          - tplink_tl-xtr8488
          - newland_nl-wr8103
          - honor_fur-602
          - newland_nl-wr9103
          - cmcc_xr30
          - cmcc_xr30-emmc

env:
  device_branch: ${{ inputs.device_branch || 'all' }}
  app_branch: 'u-boot'

jobs:
  build:
    name: Build U-Boot
    runs-on: ubuntu-24.04
    env:
      metadata_sum_path: "${{ github.workspace }}/metadata_sum.json"
    steps:
      - name: Set environment variable - ${{ env.app_branch }} - ${{ env.device_branch }}
        id: var
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # ========== Set repo branch ==========
          repo_diy="https://github.com/$GITHUB_REPOSITORY"

          repo_target="https://github.com/hanwckf/bl-mt798x"
          repo_target_branch="master"

          # ========== Build Path ==========
          dir_build="builder"
          dir_output="output"
          dir_backup="backup"
          dir_diy="DIY"
          # ---------- / ----------
          path_build="/${dir_build}"
          path_target="${path_build}/${app_branch}"
          path_output="${path_build}/${dir_output}"
          path_backup="${path_build}/${dir_backup}"

          # path_diy="${path_target}/${dir_diy}"
          # path_diy_branch="${path_diy}/${app_branch}"
          release_md="${path_build}/release.md"

          # ========== GITHUB_ENV ==========
          env_vars=(
            "repo_diy"
            "repo_target"
            "repo_target_branch"
            "path_build"
            "path_target"
            "path_output"
            "path_backup"
            "release_md"
          )
          for var in "${env_vars[@]}"; do
            echo "${var}=${!var}" | tee -a $GITHUB_ENV
          done

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          packages_install=(
            "ack"
            "antlr3"
            "asciidoc"
            "autoconf"
            "automake"
            "autopoint"
            "binutils"
            "bison"
            "build-essential"
            "bzip2"
            "ccache"
            "clang"
            "clangd"
            "cmake"
            "cpio"
            "curl"
            "device-tree-compiler"
            "ecj"
            "fastjar"
            "flex"
            "gawk"
            "gettext"
            "gcc"
            "g++"
            "gcc-multilib"
            "g++-multilib"
            "git"
            "gperf"
            "haveged"
            "help2man"
            "intltool"
            "jq"
            "lib32gcc-s1"
            "libc6-dev-i386"
            "libelf-dev"
            "libglib2.0-dev"
            "libgmp3-dev"
            "libltdl-dev"
            "libmpc-dev"
            "libmpfr-dev"
            "libncurses5-dev" # "libncursesw5" "libncursesw5-dev"
            "libreadline-dev"
            "libssl-dev"
            "libtool"
            "lld"
            "lldb"
            "lrzsz"
            "mkisofs"
            "msmtp"
            "nano"
            "ninja-build"
            "p7zip"
            "p7zip-full"
            "patch"
            "pkgconf"
            "python3" # "python3-distutils"
            "python3-docutils"
            "python3-pip"
            "python3-ply"
            "qemu-utils"
            "re2c"
            "rsync"
            "scons"
            "squashfs-tools"
            "subversion"
            "swig"
            "texinfo"
            "uglifyjs"
            "unzip"
            "vim"
            "wget"
            "xmlto"
            "xxd"
            "zlib1g-dev"
            "libdb++-dev"
            "make"
          )
          packages_extra=(
            "gcc-aarch64-linux-gnu"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_install[@]}"
          sudo -E apt-get -y -qq install "${packages_extra[@]}"
          sudo -E systemctl daemon-reload
          # sudo -E apt-get -y -qq autoremove --purge
          # sudo -E apt-get -qq clean

          # Verify Make version
          make --version
          # Verify GCC version
          gcc --version

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Switch GNU C++ Version
        id: gcc
        if: ${{ 'true' == 'false' }} # disable
        env:
          DEBIAN_FRONTEND: noninteractive
          selected_version: "14"
        working-directory: /
        run: |
          packages_install=(
            "gcc-${selected_version}"
            "g++-${selected_version}"
            "gcc-${selected_version}-multilib"
            "g++-${selected_version}-multilib"
          )
          packages_extra=(
            "gcc-${selected_version}-aarch64-linux-gnu"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_install[@]}"
          sudo -E apt-get -y -qq install "${packages_extra[@]}"
          sudo -E systemctl daemon-reload

          # List GCC version
          ls /usr/bin/gcc-*
          ls /usr/bin/g++-*

          # Setup update-alternatives for GCC
          gcc_version=$(ls /usr/bin/gcc-* | grep -oP '(?<=gcc-)\d+' | sort -u)
          echo "Available GCC Version: ${gcc_version}"
          for version in ${gcc_version}; do
            if [ -f /usr/bin/gcc-${version} ]; then
              sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${version} ${version}
            fi
            if [ -f /usr/bin/gcc-ar-${version} ]; then
              sudo update-alternatives --install /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-${version} ${version}
            fi
            if [ -f /usr/bin/gcc-nm-${version} ]; then
              sudo update-alternatives --install /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-${version} ${version}
            fi
            if [ -f /usr/bin/gcc-ranlib-${version} ]; then
              sudo update-alternatives --install /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-${version} ${version}
            fi
            # if [ -f /usr/bin/g++-${version} ]; then
            #   sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${version} ${version}
            # fi
            # if [ -f /usr/bin/gcc-${version}-aarch64-linux-gnu ]; then
            #   sudo update-alternatives --install /usr/bin/gcc-aarch64-linux-gnu gcc-aarch64-linux-gnu /usr/bin/gcc-${selected_version}-aarch64-linux-gnu ${version}
            # fi
          done
          sudo update-alternatives --query gcc

          # Setup update-alternatives for G++
          gpp_versions=$(ls /usr/bin/g++-* | grep -Eo '[0-9]+$' | sort -u)
          echo "Available G++ versions: ${gpp_versions}"
          for version in ${gpp_versions}; do
            if [ -f /usr/bin/g++-${version} ]; then
              sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${version} ${version}
            fi
          done
          sudo update-alternatives --query g++

          # Switch to selected version
          sudo update-alternatives --set gcc /usr/bin/gcc-${selected_version}
          sudo update-alternatives --set gcc-ar /usr/bin/gcc-ar-${selected_version}
          sudo update-alternatives --set gcc-nm /usr/bin/gcc-nm-${selected_version}
          sudo update-alternatives --set gcc-ranlib /usr/bin/gcc-ranlib-${selected_version}
          # G++
          sudo update-alternatives --set g++ /usr/bin/g++-${selected_version}
          echo "Switched to GCC/G++ version ${selected_version}."

          gcc --version
          g++ --version

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          # 计算 /mnt 分区的可用空间（减去 1GB 作为缓冲）, 计算根分区的可用空间（减去 4GB 作为缓冲）
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          # 创建一个大小为 mnt_size 的文件 /mnt/mnt.img, 创建一个大小为 root_size 的文件 /root.img
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          # 将这两个文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7

          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
          sudo mkdir -p ${path_build}
          sudo mount /dev/github/runner ${path_build}
          sudo chown -R runner.runner ${path_build}

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone Target Repository
        id: clonesys
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        working-directory: ${{ env.path_build }}
        run: |
          echo -e "Current working directory: $(pwd)"

          git clone ${repo_target} ${path_target} --single-branch --depth=1 --branch=${repo_target_branch} 
          echo -e "repo_target: [ ${repo_target} ]\nBRANCH: [ ${repo_target_branch} ]"

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Check environment
        id: checkenv
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # List all environment variables
          printenv

          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile U-Boot Cycle
        id: compile
        if: ${{ steps.clonesys.outputs.status }} == 'success' && !cancelled()
        env:
          device: ${{ env.device_branch }}
        working-directory: ${{ env.path_build }}
        run: |
          echo -e "Current working directory: $(pwd)"

          # [BOARD] = SOC | MULTI_LAYOUT | FIXED_MTDPARTS
          # local switch_MULTI_LAYOUT="0"
          # local switch_FIXED_MTDPARTS="0,1"
          declare -A BOARD_PARAMS=(
            ["360t7"]="mt7981|0|0,1" # 360 T7/T7U/T7M
            ["livinet_zr-3020"]="mt7981|0|0,1" # ZR3020
            ["cetron_ct3003"]="mt7981|0|0,1" # Cetron CT3003
            ["jcg_q30"]="mt7981|0|0,1" # JCG Q30 PRO
            ["konka_komi-a31"]="mt7981|0|0,1" # 康佳 KOMI-A31
            ["wr30u"]="mt7981|0,1|0,1" # 小米 WR30U/T/M [with MULTI_LAYOUT]
            ["imou_lc-hx3001"]="mt7981|0|0,1" # 乐橙 LC-HX3001
            ["clt_r30b1"]="mt7981|0,1|0,1" # 创联腾 CLT-R30B1 [with MULTI_LAYOUT]
            ["abt_asr3000"]="mt7981|0|0,1" # 安博通 ABT ASR3000
            ["cmcc_a10"]="mt7981|0|0,1" # CMCC A10
            ["cmcc_rax3000m"]="mt7981|0|0,1" # CMCC RAX3000M (SPI-NAND)
            ["cmcc_rax3000m-emmc"]="mt7981|0|0,1" # CMCC RAX3000M (EMMC)
            ["h3c_magic-nx30-pro"]="mt7981|0|0,1" # H3C NX30 Pro
            ["ax3000t"]="mt7981|0,1|0,1" # 小米 AX3000T [with MULTI_LAYOUT]
            ["redmi_ax6000"]="mt7986|0,1|0,1" # 红米 AX6000 [with MULTI_LAYOUT]
            ["tplink_tl-xdr608x"]="mt7986|0|0,1" # TP-LINK XDR4288/6086/6088
            ["ruijie_rg-x60-pro"]="mt7986|0,1|0,1" # Ruijie RG-X60 Pro [with MULTI_LAYOUT]
            ["jdcloud_re-cp-03"]="mt7986|0|0,1" # JDCloud RE-CP-03
            ["glinet_gl-mt6000"]="mt7986|0|0,1" # glinet gl-mt6000
            ["nokia_ea0326gmp"]="mt7981|0|1,0" # nokia ea0326gmp with and without FIXED_MTDPARTS
            ["ruijie_rg_x30e"]="mt7981|0,1|0,1" # Ruijie RG-X30E [with MULTI_LAYOUT]
            ["ruijie_rg_x30e_pro"]="mt7981|0,1|0,1" # Ruijie RG-X30E Pro [with MULTI_LAYOUT]
            ["tplink_tl-xtr8488"]="mt7986|0|0,1" # TP-Link TL-XTR8488
            ["newland_nl-wr8103"]="mt7981|0,1|0,1" # Newland NL-WR8103/MR3000D-CIq(256MB RAM version) [with MULTI_LAYOUT]
            ["honor_fur-602"]="mt7981|0,1|0,1" # HONOR FUR-602/603 (HONOR XT50/XU50/XC50) [with MULTI_LAYOUT]
            ["newland_nl-wr9103"]="mt7981|0,1|0,1" # Newland NL-WR9103 [with MULTI_LAYOUT]
            ["cmcc_xr30"]="mt7981|0|0,1" # CMCC XR30
            ["cmcc_xr30-emmc"]="mt7981|0|0,1" # CMCC XR30 eMMC
          )
          
          # ===== Backup Target Repository =====
          backup_repo() {
            local ORIGINAL_DIR="$PWD"

            echo "Backup path: ${path_backup}"
            mkdir -p ${path_backup}
            cp -rf ${path_target} ${path_backup}
            ls -al ${path_backup}

            echo "Changing back to the original directory ${ORIGINAL_DIR}"
            cd "${ORIGINAL_DIR}"
          }

          # ===== Define function to compile U-Boot =====
          # ----- complie_device > split_device_params > exec_build_sh -----
          complie_device() {
            local device=$1
            local params=$2
            IFS='|' read -ra PARAMS <<< "$params"
            split_device_params "$device" "${PARAMS[0]}" "${PARAMS[@]:1}"
          }

          split_device_params() {
            local BOARD=$1
            local SOC=$2
            local OTHER_PARAMS=("${@:3}")
            # 从第三个参数开始获取所有参数，存储到 OTHER_PARAMS 数组中
            local MULTI_LAYOUT_VALUES=${OTHER_PARAMS[0]:-"0"}
            local FIXED_MTDPARTS_VALUES=${OTHER_PARAMS[1]:-"0"}
            IFS=',' read -ra MULTI_LAYOUT_ARRAY <<< "${MULTI_LAYOUT_VALUES}"
            IFS=',' read -ra FIXED_MTDPARTS_ARRAY <<< "${FIXED_MTDPARTS_VALUES}"
            
            for MULTI_LAYOUT in "${MULTI_LAYOUT_ARRAY[@]}"; do
              for FIXED_MTDPARTS in "${FIXED_MTDPARTS_ARRAY[@]}"; do
                cd "${path_build}"
                rm -rf "${path_target}"
                cp -rf "${path_backup}/${app_branch}" "${path_build}"
                cd "${path_target}"
                exec_build_sh "${SOC}" "${BOARD}" "${MULTI_LAYOUT}" "${FIXED_MTDPARTS}"
              done
            done
          }

          exec_build_sh() {
            local SOC=$1
            local BOARD=$2
            local MULTI_LAYOUT=$3
            local FIXED_MTDPARTS=$4

            echo -e "Current working directory: $(pwd)"
            echo -e "---------- Compile U-Boot of ${BOARD} ----------"
            SOC=${SOC} BOARD=${BOARD} MULTI_LAYOUT=${MULTI_LAYOUT} FIXED_MTDPARTS=${FIXED_MTDPARTS} ./build.sh
            cp -rf ./output/* ${path_output}
          }
          
          # ===== main function =====
          main() {
            mkdir -p ${path_output}
            backup_repo

            if [[ -z "${device}" || "${device,,}" == "all" ]]; then
              echo "Compiling for all devices"
              for BOARD in "${!BOARD_PARAMS[@]}"; do
                complie_device "$BOARD" "${BOARD_PARAMS[$BOARD]}"
              done
            else
              if [[ -n "${BOARD_PARAMS[${device}]}" ]]; then
                echo "Compiling for device: ${device}"
                complie_device "$device" "${BOARD_PARAMS[$device]}"
              else
                echo "Invalid device: ${device}"
                exit 1
              fi
            fi

            echo -e "========== Build Finished =========="
          }
          main "$@"

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup output
        id: output
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        env:
          category: "files"
        working-directory: ${{ env.path_output }}
        run: |
          echo -e "Current working directory: $(pwd)"

          # rm -rf packages
          ls -al ./

          metadata='{"${{ env.category }}":[]}'
          for file in ./*.bin; do
            if [[ ! -d "${file}" ]]; then
              read -r checksum filename <<< "$(sha256sum "${file}")"
              filename=$(basename "${filename}")
              metadata=$(jq \
                --arg filename "${filename}" \
                --arg checksum "${checksum}" \
                '.${{ env.category }} += [{filename: $filename, checksum: $checksum}]' <<< "${metadata}")
            fi
          done
          echo "metadata=${metadata}"
          echo "${metadata}" | jq . > ${{ env.metadata_sum_path }}

          echo -e "timestamp=$(date +"%y%mw%V")" | tee -a ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: "[release.md] Record release.md"
        id: record
        env:
          release_md: ${{ env.release_md }}
        working-directory: ${{ env.path_target }}
        run: |
          printf "Current working directory: %s\n" "$(pwd)"

          release_md_dir=$(dirname ${release_md})
          mkdir -p ${release_md_dir}
          : > ${release_md}

          record_to_markdown() {
            local title="$1"
            local content="$2"
            local code_block="${3:-}"
            local format="\n### %s\n%s\n"

            if [[ -n "${code_block}" ]]; then
              format="\n### %s\n\n<details>\n<summary>%s</summary>\n\n\`\`\`%s\n%s\n\`\`\`\n\n</details>\n"
              printf "${format}" "${title}" "${title}" "${code_block}" "${content}" | tee -a ${release_md}
            else
              printf "${format}" "${title}" "${content}" | tee -a ${release_md}
            fi
          }

          record_to_markdown "Timestamp" "- [x] $(date +"%Y-%m-%d %H:%M:%S %z")"
          record_to_markdown "Repository" "- [x] ${repo_target}"
          record_to_markdown "Repository Branch" "- [x] ${repo_target_branch}"

          sum_json_content=$(jq '.' "${{ env.metadata_sum_path }}")
          record_to_markdown "sha256sum" "${sum_json_content}" "json"

          cat ${release_md}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload OpenWrt to Release
        id: release
        uses: ncipollo/release-action@main
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        env:
          timestamp: ${{ steps.output.outputs.timestamp }}
        with:
          name: "${{ env.app_branch }}_${{ env.timestamp }}"
          tag: "${{ env.app_branch }}"
          artifacts: "${{ env.path_output }}/*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          bodyFile: "${{ env.release_md }}"

      - name: Clear workspace
        id: clearwork
        if: ${{ 'true' == 'false' }} # disable
        working-directory: ${{ env.path_build }}
        run: |
          echo -e "Current working directory: $(pwd)"
          rm -rf ./* 2>/dev/null
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
